// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import static MyXDR.Constants.*;

/**
 * MyUnion's original definition in the XDR file is:
 * <pre>
 * union MyUnion switch (UnionKey type)
 * {
 *     case ERROR:
 *         Error error;
 *     case MULTI:
 *         Multi things&lt;&gt;;
 * 
 * 
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class MyUnion implements XdrElement {
  private UnionKey discriminant;
  private Error error;
  private Multi[] things;

  public static void encode(XdrDataOutputStream stream, MyUnion encodedMyUnion) throws IOException {
  //Xdrgen::AST::Identifier
  //UnionKey
  stream.writeInt(encodedMyUnion.getDiscriminant().getValue());
  switch (encodedMyUnion.getDiscriminant()) {
  case ERROR:
  Error.encode(stream, encodedMyUnion.error);
  break;
  case MULTI:
  int thingsSize = encodedMyUnion.getThings().length;
  stream.writeInt(thingsSize);
  for (int i = 0; i < thingsSize; i++) {
    Multi.encode(stream, encodedMyUnion.things[i]);
  }
  break;
  }
  }
  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static MyUnion decode(XdrDataInputStream stream) throws IOException {
  MyUnion decodedMyUnion = new MyUnion();
  UnionKey discriminant = UnionKey.decode(stream);
  decodedMyUnion.setDiscriminant(discriminant);
  switch (decodedMyUnion.getDiscriminant()) {
  case ERROR:
  decodedMyUnion.error = Error.decode(stream);
  break;
  case MULTI:
  int thingsSize = stream.readInt();
  decodedMyUnion.things = new Multi[thingsSize];
  for (int i = 0; i < thingsSize; i++) {
    decodedMyUnion.things[i] = Multi.decode(stream);
  }
  break;
  }
    return decodedMyUnion;
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static MyUnion fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static MyUnion fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
