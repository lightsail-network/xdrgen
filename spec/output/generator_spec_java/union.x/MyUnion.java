// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * MyUnion's original definition in the XDR file is:
 * <pre>
 * union MyUnion switch (UnionKey type)
 * {
 *     case ERROR:
 *         Error error;
 *     case MULTI:
 *         Multi things&lt;&gt;;
 * 
 * 
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class MyUnion implements XdrElement {
  private UnionKey discriminant;
  private Error error;
  private Multi[] things;

  public void encode(XdrDataOutputStream stream) throws IOException {
  stream.writeInt(discriminant.getValue());
  switch (discriminant) {
  case ERROR:
  error.encode(stream);
  break;
  case MULTI:
  int thingsSize = getThings().length;
  stream.writeInt(thingsSize);
  for (int i = 0; i < thingsSize; i++) {
    things[i].encode(stream);
  }
  break;
  }
  }
  public static MyUnion decode(XdrDataInputStream stream) throws IOException {
  MyUnion decodedMyUnion = new MyUnion();
  UnionKey discriminant = UnionKey.decode(stream);
  decodedMyUnion.setDiscriminant(discriminant);
  switch (decodedMyUnion.getDiscriminant()) {
  case ERROR:
  decodedMyUnion.error = Error.decode(stream);
  break;
  case MULTI:
  int thingsSize = stream.readInt();
  decodedMyUnion.things = new Multi[thingsSize];
  for (int i = 0; i < thingsSize; i++) {
    decodedMyUnion.things[i] = Multi.decode(stream);
  }
  break;
  }
    return decodedMyUnion;
  }
  public static MyUnion fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static MyUnion fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
