// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

/**
 * Hashes2's original definition in the XDR file is:
 * <pre>
 * typedef Hash Hashes2&lt;12&gt;;
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Hashes2 implements XdrElement {
  private Hash[] Hashes2;
  public void encode(XdrDataOutputStream stream) throws IOException {
    int Hashes2Size = getHashes2().length;
    stream.writeInt(Hashes2Size);
    for (int i = 0; i < Hashes2Size; i++) {
      Hashes2[i].encode(stream);
    }
  }

  public static Hashes2 decode(XdrDataInputStream stream) throws IOException {
    Hashes2 decodedHashes2 = new Hashes2();
    int Hashes2Size = stream.readInt();
    decodedHashes2.Hashes2 = new Hash[Hashes2Size];
    for (int i = 0; i < Hashes2Size; i++) {
      decodedHashes2.Hashes2[i] = Hash.decode(stream);
    }
    return decodedHashes2;
  }

  public static Hashes2 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Hashes2 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
