// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import static MyXDR.Constants.*;

/**
 * MyStruct's original definition in the XDR file is:
 * <pre>
 * struct MyStruct
 * {
 *     uint512 field1;
 *     optHash1 field2;
 *     int1 field3;
 *     unsigned int field4;
 *     float field5;
 *     double field6;
 *     bool field7;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class MyStruct implements XdrElement {
  private Uint512 field1;
  private OptHash1 field2;
  private Int1 field3;
  private XdrUnsignedInteger field4;
  private Float field5;
  private Double field6;
  private Boolean field7;
  public static void encode(XdrDataOutputStream stream, MyStruct encodedMyStruct) throws IOException{
    Uint512.encode(stream, encodedMyStruct.field1);
    OptHash1.encode(stream, encodedMyStruct.field2);
    Int1.encode(stream, encodedMyStruct.field3);
    encodedMyStruct.field4.encode(stream);
    stream.writeFloat(encodedMyStruct.field5);
    stream.writeDouble(encodedMyStruct.field6);
    stream.writeInt(encodedMyStruct.field7 ? 1 : 0);
  }
  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static MyStruct decode(XdrDataInputStream stream) throws IOException {
    MyStruct decodedMyStruct = new MyStruct();
    decodedMyStruct.field1 = Uint512.decode(stream);
    decodedMyStruct.field2 = OptHash1.decode(stream);
    decodedMyStruct.field3 = Int1.decode(stream);
    decodedMyStruct.field4 = XdrUnsignedInteger.decode(stream);
    decodedMyStruct.field5 = stream.readFloat();
    decodedMyStruct.field6 = stream.readDouble();
    decodedMyStruct.field7 = stream.readInt() == 1 ? true : false;
    return decodedMyStruct;
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static MyStruct fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static MyStruct fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
