// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * LotsOfMyStructs's original definition in the XDR file is:
 * <pre>
 * struct LotsOfMyStructs
 * {
 *     MyStruct members&lt;&gt;;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class LotsOfMyStructs implements XdrElement {
  private MyStruct[] members;
  public void encode(XdrDataOutputStream stream) throws IOException{
    int membersSize = getMembers().length;
    stream.writeInt(membersSize);
    for (int i = 0; i < membersSize; i++) {
      members[i].encode(stream);
    }
  }
  public static LotsOfMyStructs decode(XdrDataInputStream stream) throws IOException {
    LotsOfMyStructs decodedLotsOfMyStructs = new LotsOfMyStructs();
    int membersSize = stream.readInt();
    decodedLotsOfMyStructs.members = new MyStruct[membersSize];
    for (int i = 0; i < membersSize; i++) {
      decodedLotsOfMyStructs.members[i] = MyStruct.decode(stream);
    }
    return decodedLotsOfMyStructs;
  }
  public static LotsOfMyStructs fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LotsOfMyStructs fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
