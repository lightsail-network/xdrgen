// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

/**
 * OptHash2's original definition in the XDR file is:
 * <pre>
 * typedef Hash&#42; optHash2;
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OptHash2 implements XdrElement {
  private Hash optHash2;
  public void encode(XdrDataOutputStream stream) throws IOException {
    if (optHash2 != null) {
    stream.writeInt(1);
    optHash2.encode(stream);
    } else {
    stream.writeInt(0);
    }
  }

  public static OptHash2 decode(XdrDataInputStream stream) throws IOException {
    OptHash2 decodedOptHash2 = new OptHash2();
    int optHash2Present = stream.readInt();
    if (optHash2Present != 0) {
    decodedOptHash2.optHash2 = Hash.decode(stream);
    }
    return decodedOptHash2;
  }

  public static OptHash2 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static OptHash2 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
