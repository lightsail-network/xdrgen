// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

/**
 * Uint513's original definition in the XDR file is:
 * <pre>
 * typedef opaque uint513&lt;64&gt;;
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Uint513 implements XdrElement {
  private byte[] uint513;
  public void encode(XdrDataOutputStream stream) throws IOException {
    int uint513Size = uint513.length;
    stream.writeInt(uint513Size);
    stream.write(getUint513(), 0, uint513Size);
  }

  public static Uint513 decode(XdrDataInputStream stream) throws IOException {
    Uint513 decodedUint513 = new Uint513();
    int uint513Size = stream.readInt();
    decodedUint513.uint513 = new byte[uint513Size];
    stream.read(decodedUint513.uint513, 0, uint513Size);
    return decodedUint513;
  }

  public static Uint513 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Uint513 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
