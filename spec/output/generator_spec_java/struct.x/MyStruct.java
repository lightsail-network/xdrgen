// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import static MyXDR.Constants.*;

/**
 * MyStruct's original definition in the XDR file is:
 * <pre>
 * struct MyStruct
 * {
 *     int    someInt;
 *     int64  aBigInt;
 *     opaque someOpaque[10];
 *     string someString&lt;&gt;;
 *     string maxString&lt;100&gt;;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class MyStruct implements XdrElement {
  private Integer someInt;
  private Int64 aBigInt;
  private byte[] someOpaque;
  private XdrString someString;
  private XdrString maxString;
  public static void encode(XdrDataOutputStream stream, MyStruct encodedMyStruct) throws IOException{
    stream.writeInt(encodedMyStruct.someInt);
    Int64.encode(stream, encodedMyStruct.aBigInt);
    int someOpaqueSize = encodedMyStruct.someOpaque.length;
    stream.write(encodedMyStruct.getSomeOpaque(), 0, someOpaqueSize);
    encodedMyStruct.someString.encode(stream);
    encodedMyStruct.maxString.encode(stream);
  }
  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static MyStruct decode(XdrDataInputStream stream) throws IOException {
    MyStruct decodedMyStruct = new MyStruct();
    decodedMyStruct.someInt = stream.readInt();
    decodedMyStruct.aBigInt = Int64.decode(stream);
    int someOpaqueSize = 10;
    decodedMyStruct.someOpaque = new byte[someOpaqueSize];
    stream.read(decodedMyStruct.someOpaque, 0, someOpaqueSize);
    decodedMyStruct.someString = XdrString.decode(stream, Integer.MAX_VALUE);
    decodedMyStruct.maxString = XdrString.decode(stream, 100);
    return decodedMyStruct;
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static MyStruct fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static MyStruct fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
