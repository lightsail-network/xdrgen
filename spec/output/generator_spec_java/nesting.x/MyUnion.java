// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * MyUnion's original definition in the XDR file is:
 * <pre>
 * union MyUnion switch (UnionKey type)
 * {
 *     case ONE:
 *         struct {
 *             int someInt;
 *         } one;
 * 
 *     case TWO:
 *         struct {
 *             int someInt;
 *             Foo foo;
 *         } two;
 * 
 *     case OFFER:
 *         void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class MyUnion implements XdrElement {
  private UnionKey discriminant;
  private MyUnionOne one;
  private MyUnionTwo two;

  public void encode(XdrDataOutputStream stream) throws IOException {
  stream.writeInt(discriminant.getValue());
  switch (discriminant) {
  case ONE:
  one.encode(stream);
  break;
  case TWO:
  two.encode(stream);
  break;
  case OFFER:
  break;
  }
  }
  public static MyUnion decode(XdrDataInputStream stream) throws IOException {
  MyUnion decodedMyUnion = new MyUnion();
  UnionKey discriminant = UnionKey.decode(stream);
  decodedMyUnion.setDiscriminant(discriminant);
  switch (decodedMyUnion.getDiscriminant()) {
  case ONE:
  decodedMyUnion.one = MyUnionOne.decode(stream);
  break;
  case TWO:
  decodedMyUnion.two = MyUnionTwo.decode(stream);
  break;
  case OFFER:
  break;
  }
    return decodedMyUnion;
  }
  public static MyUnion fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static MyUnion fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  /**
   * MyUnionOne's original definition in the XDR file is:
   * <pre>
   * struct {
   *             int someInt;
   *         }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class MyUnionOne implements XdrElement {
    private Integer someInt;
    public void encode(XdrDataOutputStream stream) throws IOException{
      stream.writeInt(someInt);
    }
    public static MyUnionOne decode(XdrDataInputStream stream) throws IOException {
      MyUnionOne decodedMyUnionOne = new MyUnionOne();
      decodedMyUnionOne.someInt = stream.readInt();
      return decodedMyUnionOne;
    }
    public static MyUnionOne fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static MyUnionOne fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }

  }
  /**
   * MyUnionTwo's original definition in the XDR file is:
   * <pre>
   * struct {
   *             int someInt;
   *             Foo foo;
   *         }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class MyUnionTwo implements XdrElement {
    private Integer someInt;
    private Foo foo;
    public void encode(XdrDataOutputStream stream) throws IOException{
      stream.writeInt(someInt);
      foo.encode(stream);
    }
    public static MyUnionTwo decode(XdrDataInputStream stream) throws IOException {
      MyUnionTwo decodedMyUnionTwo = new MyUnionTwo();
      decodedMyUnionTwo.someInt = stream.readInt();
      decodedMyUnionTwo.foo = Foo.decode(stream);
      return decodedMyUnionTwo;
    }
    public static MyUnionTwo fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static MyUnionTwo fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }

  }
}
